/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of Qbs.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \contentspage list-of-modules.html
    \page qbs-module.html
    \ingroup list-of-modules

    \title Module qbs
    \since 1.0
    \brief Comprises general properties.

    The \c qbs module is implicitly loaded in every product. It contains properties of the current
    build environment, independent of the used programming languages and toolchains.

    \section1 General Properties

    \table
    \header
        \li Property
        \li Type
        \li Since
        \li Default
        \li Description
    \row
        \li configurationName
        \li \c{string}
        \li 1.6
        \li \c{"default"}
        \li Contains the name of the current build configuration.
    \row
        \li buildVariant
        \li \c{string}
        \li 1.0
        \li \c{"debug"}
        \li Contains the name of the build variant for the current build.
    \row
        \li debugInformation
        \li \c bool
        \li 1.0
        \li \c{true} for debug builds, \c{false} otherwise
        \li Specifies whether to generate debug information.
    \row
        \li enableDebugCode
        \li \c bool
        \li 1.0
        \li \c{true} for debug builds, \c{false} otherwise
        \li Specifies whether to compile debug code in the product.
            This is typically enabled for debug builds and disabled for release builds.
    \row
        \li optimization
        \li \c{string}
        \li 1.0
        \li \c{"none"} for debug builds, \c{"fast"} for release builds
        \li Specifies the general type of optimization that should be performed by all toolchains.
            Allowed values: \c{"none"}, \c{"fast"}, \c{"small"}
    \row
        \li targetOS
        \li \c{stringList}
        \li 1.0
        \li \c{undefined}
        \li Specifies the OS you want to build the project for. This is typically set in a profile.
            Possible values include one or more of the following:
            \c{"aix"},
            \c{"android"},
            \c{"blackberry"},
            \c{"bsd"},
            \c{"bsd4"},
            \c{"bsdi"},
            \c{"cygwin"},
            \c{"darwin"},
            \c{"dgux"},
            \c{"dynix"},
            \c{"freebsd"},
            \c{"hpux"},
            \c{"hurd"},
            \c{"integrity"},
            \c{"ios"},
            \c{"ios-simulator"},
            \c{"irix"},
            \c{"linux"},
            \c{"lynx"},
            \c{"macos"},
            \c{"msdos"},
            \c{"nacl"},
            \c{"netbsd"},
            \c{"openbsd"},
            \c{"os2"},
            \c{"os2emx"},
            \c{"osf"},
            \c{"qnx"},
            \c{"qnx6"},
            \c{"reliant"},
            \c{"sco"},
            \c{"solaris"},
            \c{"symbian"},
            \c{"ultrix"},
            \c{"unix"},
            \c{"unixware"},
            \c{"vxworks"},
            \c{"windows"},
            \c{"windowsce"},
            \c{"windowsphone"},
            \c{"winrt"}
    \row
        \li architecture
        \li \c{string}
        \li 1.0
        \li \c{undefined}
        \li Specifies the target platform's processor architecture. \c{undefined} indicates that
            the target platform is architecture-independent (for example the CLR or JVM).
            This is typically set in a profile.
            Commonly used values are: \c{"x86"}, \c{"x86_64"} and \c{"arm"}.
    \row
        \li toolchain
        \li \c{stringList}
        \li 1.0
        \li \c{undefined}
        \li Specifies the attributes of the toolchain that is going to be used for this build.
            Typical values include: \c{"gcc"}, \c{"llvm"}, \c{"clang"}, \c{"mingw"}, \c{"msvc"}
    \row
        \li sysroot
        \li \c{string}
        \li 1.0
        \li \c{undefined}
        \li Specifies the sysroot of the target platform.
            This property is typically set in a profile for cross-compiling.
    \row
        \li pathListSeparator
        \li \c{string}
        \li 1.0
        \li \c{";"} on Windows,
            \c{":"} on Unix
        \li Holds the platform-specific separator for path list that is used in environment
            variables or other contexts.
    \row
        \li nullDevice
        \li \c{string}
        \li 1.4.2
        \li \c{"NUL"} on Windows,
            \c{"/dev/null"} on Unix
        \li Holds the platform-specific file path corresponding to the null device.
    \row
        \li shellPath
        \li \c{path}
        \li 1.5
        \li \c{"%COMSPEC%"} on Windows,
            \c{"/bin/sh"} on Unix
        \li Holds the platform-specific file path corresponding to the command line interpreter.
            On Windows this is the path to \c{cmd.exe}, which is held in the \c{COMSPEC}
            environment variable - typically \c{C:/Windows/System32/cmd.exe},
            and on Unix-like platforms this is \c{/bin/sh}.
    \endtable

    \section1 Environment Properties

    This section lists constant, read-only properties set by \QBS internally.
    These properties should not be overridden.

    \table
    \header
        \li Property
        \li Type
        \li Since
        \li Default
        \li Description
    \row
        \li hostOS
        \li \c{stringList} (read only)
        \li 1.0
        \li \c{undefined}
        \li This property is set by \QBS internally and specifies the OS \QBS is running on.
            The possible values for this property are the values of \c targetOS, though some may not
            be supported.
    \row
        \li hostOSVersion
        \li \c{string} (read only)
        \li 1.2
        \li \c{undefined}
        \li The host operating system version. Currently only defined for Windows and Apple
            platforms. Consists of two or three numbers separated by dots, for instance "10.9" or
            "6.3.9600".
    \row
        \li hostOSBuildVersion
        \li \c{string} (read only)
        \li 1.2
        \li \c{undefined}
        \li The host operating system's build version. Currently only defined for Windows and Apple
            platforms. On Windows, this is the 4 or 5 digit Windows build number and is equivalent
            to \c versionPatch. On Apple platforms, this is a standard build number in the Apple
            versioning scheme, for instance "13C64".
    \row
        \li hostOSVersionMajor
        \li \c{int} (read only)
        \li 1.2
        \li \c{hostOSVersionParts[0]}
        \li The host operating system major version.
    \row
        \li hostOSVersionMinor
        \li \c{int} (read only)
        \li 1.2
        \li \c{hostOSVersionParts[1]}
        \li The host operating system minor version.
    \row
        \li hostOSVersionParts
        \li \c{list} (read only)
        \li 1.2
        \li \c{empty}
        \li The host operating system version as a list.
            For instance, Windows 8.1 (version 6.3.9600) would correspond to a value of
            \c[6, 3, 9600].
    \row
        \li hostOSVersionPatch
        \li \c{int} (read only)
        \li 1.2
        \li \c{hostOSVersionParts[2]}
        \li The host operating system patch level.
    \row
        \li version
        \li \c{string} (read only)
        \li 1.4.1
        \li
        \li Version number of \QBS as a string, i.e. "1.4.1".
    \row
        \li versionMajor
        \li \c{int} (read only)
        \li 1.4.1
        \li
        \li Major version number of \QBS.
    \row
        \li versionMinor
        \li \c{int} (read only)
        \li 1.4.1
        \li
        \li Minor version number of \QBS.
    \row
        \li versionPatch
        \li \c{int} (read only)
        \li 1.4.1
        \li
        \li Patch version number of \QBS.
    \endtable

    \section1 Installation Properties

    This section lists properties specific to the \QBS installation mechanism.
    See \l{Installing Files} for more information.

    \table
    \header
        \li Property
        \li Type
        \li Since
        \li Default
        \li Description
    \row
        \li install
        \li \c{bool}
        \li 1.0
        \li \c{false}
        \li Specifies whether to install a certain set of files.
            This is typically set in a \c{Group} item to mark a number of files as installable.
            \note Artifacts for which this property is enabled automatically receive the file tag
            "installable". This is useful for writing packaging-related rules.
    \row
        \li installSourceBase
        \li \c{string}
        \li 1.4
        \li see below
        \li Specifies the base directory of the local files that are going to be installed. The
            source base directory is omitted from the target directory path specified in
            \c{installDir}. The default value of this property is the directory of the current file
            to be installed, relative to the product's source directory.
    \row
        \li installDir
        \li \c{string}
        \li 1.0
        \li \c{undefined}
        \li Specifies the installation directory for the files of a product or a \c{Group}. The
            value of this property is a path that is relative to \c installPrefix.
    \row
        \li installPrefix
        \li \c{string}
        \li 1.1
        \li \c{empty}
        \li Specifies the global installation prefix. It is implicitly prepended to all values of
            \c installDir. The \c installPrefix itself is relative to the \c installRoot in the
            context of installation.
    \row
        \li installRoot
        \li \c{string}
        \li 1.4
        \li \c{<build dir>/install-root}
        \li Specifies the global installation root. It is implicitly prepended to all values
            of \c installPrefix in the context of installation.
            \note This property is fundamentally different from \c installDir and \c installPrefix
            in that it must not be visible to the code being built. In fact, the install root is
            often just a temporary location used to package the binaries, which should therefore not
            assume they will be in that location at run-time. For the same reason, this property
            is usually not set from within project files.
    \endtable

    \section1 Multiplexing Properties

    This section lists properties specific to product multiplexing.

    \table
    \header
        \li Property
        \li Type
        \li Since
        \li Default
        \li Description
    \row
        \li architectures
        \li \c{stringList}
        \li 1.9
        \li \c{["armv5te"]} on Android, same as Xcode on Apple platforms, otherwise equivalent to
            \c{[qbs.architecture]}
        \li Specifies the architectures the product will be built for.
    \row
        \li buildVariants
        \li \c{stringList}
        \li 1.9
        \li equivalent to \c{[qbs.buildVariant]}
        \li Specifies the build variants the product will be built for.
    \row
        \li profiles
        \li \c{stringList}
        \li 1.9
        \li \c{[product.profile]}
        \li The profiles for which the product should be built. For each profile listed here,
            one instance of the product will be built according to the properties set in
            the respective profile.
            This property is the same as \c{product.profiles}, which takes precedence.
    \endtable
*/

