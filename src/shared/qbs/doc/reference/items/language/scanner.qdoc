/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of Qbs.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/
/*!
    \contentspage list-of-language-items.html
    \previouspage rule-item.html
    \page scanner-item.html
    \nextpage subproject-item.html
    \ingroup list-of-language-items
    \ingroup list-of-items
    \keyword QML.Scanner

    \title Scanner Item
    \brief Creates custom dependency scanners in modules.

    A \c Scanner item can appear inside a \l{Module Item}, and allows to extract
    dependencies for artifacts from the artifacts' file contents.
    For example, this is what a scanner for "qrc" files might look like:
    \code
    import qbs.Xml

    Module {
      Scanner {
        inputs: 'qrc'
        scan: {
          var xml = new XmlDomDocument(input.filePath);
          dependencies = [];
          // retrieve <file> entries from the XML document
          return dependencies;
        }
      }
    }
    \endcode

    \section1 Scanner Properties
    \table
    \header
        \li Property
        \li Type
        \li Default
        \li Description
    \row
        \li condition
        \li bool
        \li true
        \li If true, the scanner is enabled, otherwise it does nothing.
    \row
        \li inputs
        \li string list
        \li undefined
        \li File tags the input artifacts must match.
    \row
        \li recursive
        \li bool
        \li false
        \li Determines whether to scan the returned dependencies using the same scanner.
    \row
        \li searchPaths
        \li script
        \li undefined
        \li Script that returns paths to look for dependencies.
            The code in this script is treated as a function with the signature
            \c{function(project, product, input)}.
    \row
        \li scan
        \li script
        \li undefined
        \li Script that reads the input artifact and returns string list with dependencies.
            The code in this script is treated as a function with the signature
            \c{function(project, product, input)}.
    \endtable
*/
